@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using LMS.Blazor.Services
@using LMS.Shared.DTOs
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject IHttpClientFactory HttpClientFactory
@inject ITokenStorage TokenStorage

<PageTitle>Logga in</PageTitle>

<div class="no-padding container-fluid w-100 h-100 d-flex justify-content-center align-items-center lexicon-subpage-height">
    <div class="lexicon-primary px-4 py-5 special-margin d-flex justify-content-center align-items-center flex-column lexicon-rounded-large col-md-6 login-width-mobile">
        <h1 class="px-2">LOGGA IN</h1>
        <div class="row d-flex justify-content-center align-items-center col-md-10 login-info">
            <div class="col-md-8">
                <section>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        @* <h2>Use a local account to log in.</h2> *@
                        <hr />
                        @* <ValidationSummary class="text-danger" role="alert" /> *@
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email" class="form-label">E-post</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="password" class="form-label">Lösenord</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                Kom ihåg mig
                            </label>
                        </div>
                        <div class="d-flex justify-content-center">
                            <button type="submit" class="btn w-100 lexicon-button lexicon-button-special button-fontsize">LOGGA IN</button>
                        </div>
                        <div class="text-center pt-3">
                            <p>
                                <a href="Account/ForgotPassword">Glömt ditt lösenord?</a>
                            </p>
                        </div>
                    </EditForm>
                </section>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true

        //ToDo: Handle login with username instead to not require geting the User from Database
        ApplicationUser? user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            errorMessage = "Misslyckaded inloggning, email existerar ej.";
            return;
        }

        //ToDo: make service of API call to remote server (LMS.API)!
        var tokens = await GetTokensFromApi(user.UserName!, Input.Password);

        if (tokens == null)
        {
            errorMessage = "Failed to login please try again.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            await TokenStorage.StoreTokensAsync(user.Id, tokens);

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("home");


        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    private async Task<TokenDto?> GetTokensFromApi(string username, string password)
    {
        var httpClient = HttpClientFactory.CreateClient("LmsAPIClient");
        var response = await httpClient.PostAsJsonAsync("api/auth/login", new UserForAuthDto(username, password));

        if (!response.IsSuccessStatusCode)
        {
            return null;
        }

        return await response.Content.ReadFromJsonAsync<TokenDto>();
    }
}
