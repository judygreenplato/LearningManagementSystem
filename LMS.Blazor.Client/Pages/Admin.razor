@page "/admin"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Components
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using LMS.Shared.DTOs.Read
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize(Roles = "Teacher")]

<AuthorizeView>
	<Authorized>
		<div class="container mx-auto mt-5">
			@if (courses == null)
			{
				<div class="d-flex w-100 h-100 justify-content-center align-items-center lexicon-subpage-height">
					<div class="loader"></div>
				</div>
			}
			else if (!courses.Any())
			{
				<p>Inga kurser tillgängliga.</p>
			}
			else
			{
				<div class="d-flex justify-content-center">
					<div class="flex-grow-1 d-flex flex-column align-items-center w-100">
						<div class="row justify-content-center w-100">
							<h2 class="text-center">KURSER</h2>
								<div class="d-flex justify-content-center flex-column">
									<div class="col-md-8 mb-4 align-self-center w-100">
									@foreach (var course in courses)
									{
										<p style="display: none;">@(sendId++)</p>
										<CourseCard Course="course" SendId=@sendId/>
									}
									</div>
								</div>
							</div>
						<div class="row justify-content-center w-100">
							<UserCard Users="users"/>
						</div>
					</div>

                    <div class="position-fixed" style="bottom: 50px; right: 50px">
						<div class="btn-group dropup">
							<button type="button" class="btn lexicon-dropup" data-bs-toggle="dropdown" aria-expanded="false">
								<p>+</p>
							</button>
							<ul class="dropdown-menu dropdown-helper">
								<a class="btn lexicon-dropup tiny-padding" href="create-course"><img src="Images/addCourse.png" /></a>
								<a class="btn lexicon-dropup" href="register"><img src="Images/addUser.png" /></a>
							</ul>
						</div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container text-center mt-5">
            <p>Du har inte rättigheter till den här sidan.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
	[Inject]
	private IApiService _apiService { get; set; } = default!;
	[Inject]
	private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

	private List<CourseDto>? courses;
	private List<UserDto>? users;
	private int sendId = 0;

	private void AddToId()
	{
		sendId++;
	}

	protected override async Task OnInitializedAsync()
	{
		await FetchCoursesAsync();
	}

	private async Task FetchCoursesAsync()
	{
		try
		{
			courses = (await _apiService.GetAsync<List<CourseDto>>("courses")).ToList();
			users = (await _apiService.GetAsync<List<UserDto>>("users")).ToList();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error while fetching courses: {ex.Message}");
		}
	}
}
